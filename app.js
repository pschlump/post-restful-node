/* Do not modify this file - it is generated by m4 */






/*
 * Copyright (C) 2012 Philip Schlump - All rights reserved.
 * Version: 0.4.4 - Working with front end enough to keep and update a list.
 *
 * Description: This is a RESTful interface to tables in PostgreSQL.
 *
 */


var __VERSION__ = "0.4.4";
var __FILE__ = "backbone-relational-tutorial/app.js";

// Imports /////////////////////////////////////////////////////

var   completeParams = require('./completeParams.js')
	, validate = require('./validate.js')
;

var   filed = require('filed')
	, Logger = require('bunyan')
	, mime = require('mime')
	, path = require('path')
	, restify = require('restify')
;

// Database ////////////////////////////////////////////////////

var pg = require('pg')
	, conString = "tcp://postgres:1234@localhost/test"
;
var pgDb = new pg.Client(conString);
pgDb.connect(function(err){
	if ( err ) {
		console.log("Unable to connect to databse - check that it is up and that connection string is correct.");
		console.log(JSON.stringify(err));
		process.exit(1);
	}
});

// Processing of $1, $2 in Postgres Queries
var dn = new getDollarNumber();




// ------------------------------------------------------------------------------------------------------------------------------------------
// Includes
// ------------------------------------------------------------------------------------------------------------------------------------------
/* Do not modify this file - it is generated by m4 */







/// $listen_port.m4.js
var listen_port = 3050;

/* Do not modify this file - it is generated by m4 */








// Model /////////////////////////////////////////////////////
/// $model.m4.js
var model = {
	  sequences: [ "test2_seq", "todo1_id_sequence", "time_track_id_sequence", "em1_id_sequence" ]
	, tables: [
	// thread --------------------------------------------------------------------------------------------------------------------------
			  {
				  "name": "thread"
				, "columns": [
						{ "column_name": "id"
						, "column_type": ["bigint","number"]
						, "auto_generated": "yes"
						, "primary_key": "yes"
						}
					]
				}

	// Track Email ---------------------------------------------------------------------------------------------------------------------
	// Path to: /home/pschlump/lib/read-json/data
			, {
				  "name": "em1"
				, "columns": [
						  { "column_name": "id" 			, "column_type": ["bigint","number"] 	, "auto_generated": "yes" , "primary_key": "yes" }
						, { "column_name": "e_address" 		, "column_type": ["string","250"] 		,  "primary_key": "no" }
						, { "column_name": "e_class" 		, "column_type": ["string","20"] 		,  "primary_key": "no" }
						, { "column_name": "e_confirmed" 	, "column_type": ["string","1"] 		,  "primary_key": "no" }
					]
				}

	// Track test2a ---------------------------------------------------------------------------------------------------------------------
	// Path to: ./test_02.sql
			, {
				  "name": "test2a"
				, "default_query_column":"username"
				, "columns": [
						  { "column_name": "id" 			, "column_type": ["bigint","number"] 		, "auto_generated": "yes" , "primary_key": "yes" }
						, { "column_name": "username" 		, "column_type": ["string","40"] 			,  "primary_key": "no" }
						, { "column_name": "password" 		, "column_type": ["string","40"] 			,  "primary_key": "no" }
						, { "column_name": "user_type" 		, "column_type": ["string","25"] 			,  "primary_key": "no" }
						, { "column_name": "user_group" 	, "column_type": ["biging","number"] 		,  "primary_key": "no" }
					]
				}

	// More controled than just a table, can be a read-only view, or a insert only item.
			, { "name":"all_tables", "predef": true, "select":"select %{log_comment%} * from pg_tables" }
			, { "name":"my_tables", "predef": true, "select":"select %{log_comment%} * from pg_tables where schemaname = current_schema()" }
			, { "name":"q0", "predef": true, "select":""+
					"select t1.\"Id\" " +
					"	, t1.\"NPerDay\" " +
					"	, t1.\"Title\" " +
					"	, t1.\"Tags\" " +
					"from  \"so_data\" as t1 " +
					"where t1.\"PostTypeId\" = 1 " +
					"  and t1.\"Id\" in ( " +
					"	select t3.\"Tag_id\" " +
					"	from \"soso_tag\" t2, \"soso_tag_list\" t3 " +
					"	where ( t2.\"Tag\" = 'javascript' " +
					"		or  t2.\"Tag\" = 'jquery' " +
					"		or  t2.\"Tag\" = 'html' " +
					"		or  t2.\"Tag\" = 'css' " +
					"		) " +
					"	  and t2.\"Id\" = t3.\"Id\" " +
					"	) " +
					"order by t1.\"NPerDay\" desc " +
					""
				, "predef_opts": [ "readonly", "cached", "paged", "pagesize:500" ]
				, "columns": [
						  { "column_name": "Id" 			, "column_type": ["bigint","number"] 	, "template": "%{Id|LinkSO,SOID%}" , "primary_key": "yes" }
						, { "column_name": "NPerDay" 		, "column_type": ["float"] 				, "template": "%{NPerDay|ConvInt%}" , "primary_key": "no" }
						, { "column_name": "Title" 			, "column_type": ["string","80"] 		, "template": "%{Title%}" , "primary_key": "no", "width":500 }
						, { "column_name": "Tags" 			, "column_type": ["string","80"] 		, "template": "%{Tags%}" , "primary_key": "no", "width":220 }
					]
				}


	// time_track --------------------------------------------------------------------------------------------------------------------------
			, {
				  "name": "time_track"
				, "default_query_column":"story"
				, "columns": [
						  { "column_name": "id" 			, "column_type": ["bigint","number"] 	, "auto_generated": "yes" , "primary_key": "yes" }
						, { "column_name": "flag" 			, "column_type": ["string","4"] 		, "auto_generated": "no" , "primary_key": "no" }
						, { "column_name": "in_out" 		, "column_type": ["date","date"] 		, "auto_generated": "no" , "primary_key": "no" }
						, { "column_name": "comment" 		, "column_type": ["string","2048"] 		, "auto_generated": "no" , "primary_key": "no" }
					]
				, "validate": {
						  "insert": [
							  { "id"		:{ "type": "number" } }
							, { "flag"		:{ "type": "string", "min_length": 3, "max_length": 4, "default":"xxxx" } }
							, { "in_out"	:{ "type": "date", "not-required":true, "default":"now()" } }
							, { "comment"	:{ "type": "string", "not-required":true } }
						]
						, "update": [
							  { "id"		:{ "type":"number" } }
							, { "flag"		:{ "type": "string", "min_length": 3, "max_length": 4 } }
							, { "in_out"	:{ "type": "date", "not-required":true, "default":"now()" } }
							, { "comment"	:{ "type": "string", "not-required":true } }
						]
						, "delete": [
							  { "id":{ "type": "number" } }
						]	
						, "select": [
						]	
						, "select-pk": [
							  { "id":{ "type": "number" } }
						]	
						, "meta": [
						]	
					}
			}
	// ajax6 --------------------------------------------------------------------------------------------------------------------------
			, {
			  "name": "ajax6"
			, "default_query_column":"story"
			, "columns": [
					  { "column_name": "num" 			, "column_type": ["bigint","number"] 	, "auto_generated": "yes" , "primary_key": "yes" }
					, { "column_name": "story" 			, "column_type": ["string","40"] 		, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "diggs" 			, "column_type": ["biging","number"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "link" 			, "column_type": ["string","240"] 		, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "title" 			, "column_type": ["string","240"] 		, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "description" 	, "column_type": ["string","240"] 		, "auto_generated": "no" , "primary_key": "no" }
				]
			, "validate": {
					  "insert": [
						  { "num":{ "type":"number" } }
						, { "story":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "diggs":{ "type": "number"} }
					]
					, "update": [
						  { "num":{ "type":"number" } }
						, { "story":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "diggs":{ "type": "number"} }
					]
					, "delete": [
						  { "num":{ "type": "number" } }
					]	
					, "select": [
					]	
					, "select-pk": [
						  { "num":{ "type": "number" } }
					]	
					, "meta": [
					]	
				}
			}
	// test2 --------------------------------------------------------------------------------------------------------------------------
			, {
			  "name": "test2"
			, "default_query_column":"username"
			, "columns": [
					  { "column_name": "id" 		, "column_type": ["bigint","number"] , "auto_generated": "yes" , "primary_key": "yes" }
					, { "column_name": "username" 	, "column_type": ["string","40"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "password" 	, "column_type": ["string","40"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "user_type" 	, "column_type": ["string","25"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "user_group"	, "column_type": ["bigint","number"] , "auto_generated": "no" , "primary_key": "no" }
				]
			, "validate": {
					  "insert": [
						  { "id":{ "type":"number" } }
						, { "username":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "password":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "user_type":{ "type": "string", "list": ["user", "master"] } }
						, { "user_group":{"type": "nubmer" } }
					]
					, "update": [
						  { "id":{ "type":"number" } }
						, { "username":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "password":{ "type": "string", "min_length": 5, "max_length": 40 } }
						, { "user_type":{ "type": "string", "list": ["user","master"] } }
						, { "user_group":{"type": "nubmer" } }
					]
					, "delete": [
						  { "id":{ "type": "number" } }
					]	
					, "select": [
					]	
					, "select-pk": [
						  { "id":{ "type": "number" } }
					]	
					, "meta": [
					]	
				}
			}
	// Todo1 --------------------------------------------------------------------------------------------------------------------------
			, {
			  "name": "todo1"
			, "default_query_column":"username"
			, "columns": [
					  { "column_name": "id" 	, "column_type": ["bigint","number"] , "auto_generated": "yes" , "primary_key": "yes" }
					, { "column_name": "title" 	, "column_type": ["string","250"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "done" 	, "column_type": ["string","5"] 	, "auto_generated": "no" , "primary_key": "no" }
					, { "column_name": "order" 	, "column_type": ["number"] 		, "auto_generated": "no" , "primary_key": "no" }
				]
			, "validate": {
					  "insert": [
						  { "id":{ "type":"number" } }
						, { "title":{ "type": "string", "max_length": 250 } }
						, { "done":{ "type": "string", "max_length": 5 } }
						, { "order":{ "type": "number" } }
					]
					, "update": [
						  { "id":{ "type":"number" } }
						, { "title":{ "type": "string", "max_length": 250 } }
						, { "done":{ "type": "string", "max_length": 5 } }
						, { "order":{ "type": "number" } }
					]
					, "delete": [
						  { "id":{ "type": "number" } }
					]	
					, "select": [
					]	
					, "select-pk": [
						  { "id":{ "type": "number" } }
					]	
					, "meta": [
					]	
				}
			}
		]
};



var monitor = require('fs-watch').monitor;
var fs = require ( "fs" );

function getFile( path ) {
	var s = fs.readFileSync(path);
	s = String ( s );
console.log ( "read file" );
	var j = JSON.parse ( s );
console.log ( "parsed it file" );
	model.tables.push ( j );
console.log ( "pushed it it" );
}

function monitorIt() {

	monitor('/home/pschlump/www/app-t04.qr-today.com/www/post/model2.js', function (monitor) {
	console.log ( "setup of monitor" );
	  monitor.on('change', function (path, stats, oldStats) {
		console.log('Event: change, Path: ', path);
		getFile(path);
		setTimeout(monitorIt(), 500);
	  });

	//  monitor.on('remove', function (path, stats) {
	//    console.log('Event: remove, Path: ', path);
	//  });

	  monitor.on('create', function (path, stats) {
		console.log('Event: create, Path: ', path);
		getFile(path);
		setTimeout(monitorIt(), 500);
	  });
	});

}

monitorIt();

/* Do not modify this file - it is generated by m4 */







/// $debug.m4.js
// ------------------------------------------------------------------------------------------------------------------------------------------
//
var $debug$ = {
		  f1: 0
		, f2: 1
		, f3: 0
		, f4: 0
		, showQuery: 1			// Dump at bottom of gen_crud_lib.m4.js - shows most info for the query.
	};

function debug_1 ( f, ln, s ) {
	if ( $debug$.f1 ) {
		console.log("File:"+__FILE__+" Func:"+f+" Line No:"+ln+"  "+s);
	}
}

function debug_2 ( fi, f, ln, s ) {
	if ( $debug$.f2 ) {
		console.log("File:"+fi+" Func:"+f+" Line-No:"+ln+" Msg:"+s);
	}
}


/* Do not modify this file - it is generated by m4 */









/// $model_lib.m4.js
// ------------------------------------------------------------------------------------------------------------------------------------------
function find_seq ( seq_name, model ) {
    'use strict';
	var __FUNCTION__ = "find_seq";
	var i, mx;
	for ( i = 0, mx = model.sequences.length; i < mx; i++ ) {
		if ( model.sequences[i] === seq_name ) {
			return i;
		}
	}
	return -1;
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function find_table ( table_name, model ) {
    'use strict';
	var __FUNCTION__ = "find_table";
	var i, mx;
	for ( i = 0, mx = model.tables.length; i < mx; i++ ) {
		if ( model.tables[i].name === table_name ) {
			return i;
		}
	}
	return -1;
}


/* Do not modify this file - it is generated by m4 */







// ------------------------------------------------------------------------------------------------------------------------------------------
function validate_data ( op, table_name, req_params ) {
    'use strict';
	var __FUNCTION__ = "validate_data";
	var tn = find_table ( table_name, model );
	//debug_2(".1.validate_data.m4.js",__FUNCTION__,14,"tn="+tn+" op="+op );
	//debug_2(".1.validate_data.m4.js",__FUNCTION__,15,"model.tables["+tn+"].name = "+model.tables[tn].name+" desired table_name="+table_name );
	if ( typeof model.tables[tn].validate !== "undefined" ) {												// If not specified then validation is true.  (Think read-only views)
		if ( typeof model.tables[tn].validate[op] !== "undefined" ) {
			var val = model.tables[tn].validate[op];
			return validate.validate_object ( req_params, val );
		}
	}
	return { "ok":true };
}



/* Do not modify this file - it is generated by m4 */







/// $ts0.m4.js
// ------------------------------------------------------------------------------------------------------------------------------------------
/**
 * ts0 Take a template and a hash of values/functions and map the template.
 * Syntax for the templates is: %{name|filter|filter...%}
 * @param tmpl string the template.
 * @param ns hash the hash of replacement values/functions.
 */
function ts0(tmpl, ns) {
    'use strict';
	var __FUNCTION__ = "ts0";
    /*jslint regexp: true*/
	var p1 = tmpl.replace(/%{([A-Za-z0-9_]*)%}/g,
		function(j, t) {
			var s = "";
			if ( typeof ns [ t ] !== "undefined" )
				s = ns [ t ];
			return s;
		});
	return p1;
}


/* Do not modify this file - it is generated by m4 */








// ------------------------------------------------------------------------------------------------------------------------------------------
/// $dollar_lib.m4.js
// ------------------------------------------------------------------------------------------------------------------------------------------
function getDollarNumber ( ) {
    'use strict';
	var __FUNCTION__ = "getDollarNumber";
	this.dollar = {};
	this.next_dollar = 1;
	this.data_saved = [];
}

getDollarNumber.prototype.init = function () {
    'use strict';
	var __FUNCTION__ = "init";
	this.dollar = {};
	this.next_dollar = 1;
	this.data_saved = [];
}

getDollarNumber.prototype.get_dollar_no = function ( req_params, item_name ) {
    'use strict';
	var __FUNCTION__ = "get_dollar_no";
	if ( item_name in this.dollar ) {
		return this.dollar[item_name];
	}
	this.data_saved[ this.next_dollar-1 ] = req_params [ item_name ];
	debug_2(".1.dollar_lib.m4.js",__FUNCTION__,36,"saved_data["+(this.next_dollar-1)+"] = item_name="+item_name+" req_params[item_name]="+req_params[item_name]);

	this.dollar[item_name] = this.next_dollar++;
	return this.dollar[item_name];
}

getDollarNumber.prototype.get_dollar_data = function () {
    'use strict';
	var __FUNCTION__ = "get_dollar_data";
	return this.data_saved;
}

getDollarNumber.prototype.have_data = function () {
    'use strict';
	var __FUNCTION__ = "have_data";
	if ( this.data_saved.length > 0 ) return true;
	return false;
}

getDollarNumber.prototype.runQuery = function ( stmt, fx ) {
    'use strict';
	var __FUNCTION__ = "runQuery";
	var query;
	try {
		debug_2(".1.dollar_lib.m4.js",__FUNCTION__,60,"\nStmt: "+stmt);
		debug_2(".1.dollar_lib.m4.js",__FUNCTION__,61,"Data: "+JSON.stringify ( this.data_saved ));
		if ( this.have_data() ) {
			if ( fx ) {
				query = pgDb.query ( stmt, this.data_saved, fx );
			} else {
				query = pgDb.query ( stmt, this.data_saved );
			}
		} else {
			if ( fx ) {
				query = pgDb.query ( stmt, fx );
			} else {
				query = pgDb.query ( stmt );
			}
		}
	} catch (err) {
		debug_2(".1.dollar_lib.m4.js",__FUNCTION__,76,"Error: "+JSON.stringify ( err ) );
	}
	debug_2(".1.dollar_lib.m4.js",__FUNCTION__,78,"\n\n" );
	return query;
}




/* Do not modify this file - it is generated by m4 */







/// $gen_crud_lib.m4.js
// ------------------------------------------------------------------------------------------------------------------------------------------
function check_table_name ( table_name ) {
	'use strict';
	var __FUNCTION__ = "check_table_name";
	var tp = find_table ( table_name, model );
	var rv = {};
	if ( tp === -1 ) {
		// crud_info = gen_crud_info ( crud_info, 'predef', table_name, req.params, __FUNCTION__, __FILE__, 17 );
		rv.error = new restify.InvalidArgumentError("Error (1801): File: gen_crud_lib.m4.js Line: "+ 18 +", The specified table is not configured for access in this software. table_name=("+table_name+")");
	}
	return rv;
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function SQLEncode ( s ) {
	return "'" + s.replace ( "'", "''" ) + "'";
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function SQLEncodeNQ ( s ) {
	return s.replace ( "'", "''" );
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function validate_column_name ( tp, col ) {
	for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
		if ( model.tables[tp].columns[i].column_name == col ) {
			return 1;
		}
	}
	return 0;
}
// ------------------------------------------------------------------------------------------------------------------------------------------
function column_get_db_type ( tp, col ) {
	for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
		if ( model.tables[tp].columns[i].column_name == col ) {
			return ( model.tables[tp].columns[i].column_type[0] );
		}
	}
	return "unknown";
}


// ------------------------------------------------------------------------------------------------------------------------------------------
var gen_where_clause_error = 0;
var gen_where_clause_error_msg = "";
function gen_where_clause ( tp, clause ) {
	var w, i, or, and;
	switch ( clause.op ) {
	case '!=':
	case '<>':
	case '<=':
	case '>=':
	case '<':
	case '>':
	case '=':
	case 'like':
	case 'not like':
		// xyzzy - convert use of inline data to $ var
		// xyzzy - type == 'D' for date, 'DT' for date-time etc
		// xyzzy - what about formatted dates
		if ( ! validate_column_name ( tp, clause.var_name ) ) {
			gen_where_clause_error = 100;
			gen_where_clause_error_msg = "Invalid column name: "+clause.var_name
		} else {
			if ( column_get_db_type ( tp, clause.var_name )  === 'string' ) {
				return "\"" + clause.var_name + "\"" + clause.op + SQLEncode(clause.value);
			} else {
				return "\"" + clause.var_name + "\"" + clause.op + clause.value;
			}
		}
	case 'or':
		w = "";
		or = " ";
		for ( i = 0; i < clause.child.length; i++ ) {
			w = w + or + "(" + gen_where_clause ( tp, clause.child[i] ) + " ) ";
			or = " or ";
		}
		return w;
	case 'and':
		w = "";
		and = " ";
		for ( i = 0; i < clause.child.length; i++ ) {
			w = w + and + "(" + gen_where_clause ( tp, clause.child[i] ) + " ) ";
			and = " and ";
		}
		return w;
	}
}

var debug4x = 0;

// ------------------------------------------------------------------------------------------------------------------------------------------
//
// Add to Request on Select
// 	query=				--- Need to understand this more --- Currently just a "word" that we are searching for
// 						--- Let's just search using keyword matching on a specified field/fields
// 	where=				comprehensive limitations on data set returned --- JSON parse tree of criteria
// 	offset=
// 	count=
// 	appkey= ... Ignored for now
// 	sort=	[Col]-[asc|desc],...
//
// ------------------------------------------------------------------------------------------------------------------------------------------
// Xyzzy-require - split up into different gen_insert_info, gen_select_info etc.
// ------------------------------------------------------------------------------------------------------------------------------------------
// Generate info for building selects/updates/delets/inserts
function gen_crud_info ( rv, op, table_name, req_params, func, file, line ) {
	'use strict';
	var __FUNCTION__ = "gen_crud_info";

	var w, tp, s_where;
	var i, mx, com, com1, com2, where, column_name, i_pk, i_p1;

	// ------------------------------------------------------------ New Params ------------------------------------------------------------
	// really move this to *crud*lib*

	var count = 	( req_params.count  ) ? req_params.count : "";		// # of rows to return
	var offset = 	( req_params.offset ) ? req_params.offset : "";		// offset from beginning of data set

	var sort = 		( req_params.sort   ) ? req_params.sort : "";		// sort order

	var query = 	( req_params.query  ) ? req_params.query : "";		// take specified columns and do a LIKE
	var where = 	( req_params.where  ) ? req_params.where : "";		// convert parse tree into where clause

	var appkey = 	( req_params.appkey ) ? req_params.appkey : "";		// Ignored for the moment

	if ( $debug$.showQuery ) {
		console.log ( "Query setup is:\nFile: "+ ".1.gen_crud_lib.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 138 );
		console.log ( "    "+ " count="+count +" offset="+offset +" sort="+sort +" query="+query +" where="+where +" appkey="+appkey );
	}

	// This should be all the rv{hash} components

	rv.delete_pk_where = "";			// where ... for delete statment
	rv.error = false;					// return error messages 
	rv.insert_col_names = "";			// names of columns to use in, "insert into TABLE ( insert_col_names ) ..."
	rv.insert_col_no_s = "";			// column number for data to bind to insert, "insert into ... values ( $1, $2, ... )"
	rv.limit = "";						// xyzzy - can you limit $1
	rv.log_comment = "";				// comment so you can find stmt in PostfreSQL log file
	rv.offset = "";						// xyzzy - can you offset $1
	rv.order_by_clause = "";			// order by clause
	rv.select_projected_cols = "";		// select PROJECTED_COLS ...
	rv.select_stmt = "";				// the select template
	rv.select_where_by_pk = "";			// where clause for select when selecting by the PK of the table
	rv.table_column_info = "";
	rv.table_name = "";					// name of the table being selected from
	rv.table_tp = "";
	rv.update_pk_where = "";
	rv.update_set = "";
	rv.where_clause = "";

	// ------------------------------------------------------------ End Params ------------------------------------------------------------
	dn.init();
	rv.table_name = table_name;
	tp = find_table ( table_name, model );
	rv.error = false;
	if ( tp < 0 ) {
		// xyzzy3 - return error - don't know how or what yet
		rv.error = new restify.InvalidArgumentError("Error (1892): The specified table is not available.");
	}
	rv.table_tp = tp;
	rv.table_column_info = model.tables[tp];
	rv.log_comment = "/* { File: \""+file+"\", Func:\""+func+"\", LineNo:\""+line+"\" } */";	// Xyzzy - consider adding Server:#####

	// inserts
	if ( op === "insert" ) {
		rv.insert_col_names = "";
		rv.insert_col_no_s = "";
		com = " ";
		for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
			column_name = model.tables[tp].columns[i].column_name;
			rv.insert_col_names = rv.insert_col_names + com + "\"" + column_name + "\"";
			i_p1 = '$' + dn.get_dollar_no ( req_params, column_name );
			rv.insert_col_no_s = rv.insert_col_no_s + com + i_p1;
			com = ",";
		}
	}

	// updates
	if ( op === "update" ) {
		rv.update_set = "";
		rv.update_pk_where = "";
		rv.insert_col_names = "";
		rv.insert_col_no_s = "";
		rv.where_clause = "";
//xyzzy - do stuff

		com1 = " ";
		com = " ";
		where = " where ";
		for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
			column_name = model.tables[tp].columns[i].column_name;
			rv.insert_col_names = rv.insert_col_names + com1 + "\"" + column_name + "\"";
			i_p1 = '$' + dn.get_dollar_no ( req_params, column_name );
			rv.insert_col_no_s = rv.insert_col_no_s + com1 + i_p1;
			com1 = ",";
			if ( typeof model.tables[tp].columns[i].primary_key === "string" && model.tables[tp].columns[i].primary_key === "yes" ) {
				i_pk = '$' + dn.get_dollar_no( req_params, column_name );
				rv.update_pk_where = rv.update_pk_where + where + "\""+ column_name + "\" = " + i_pk;
				where = " and ";
			} else {
				i_p1 = '$' + dn.get_dollar_no( req_params, column_name );
				rv.update_set = rv.update_set + com + "\""+ column_name + "\" = " + i_p1;
				com = ",";
			}
		}
	}
	
	// deletes
	if ( op === "delete" ) {
		rv.delete_pk_where = "";
		rv.where_clause = "";
//xyzzy - do stuff
		where = " where ";
		for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
			column_name = model.tables[tp].columns[i].column_name;
			if ( typeof model.tables[tp].columns[i].primary_key === "string" && model.tables[tp].columns[i].primary_key === "yes" ) {
				i_pk = '$' + dn.get_dollar_no( req_params, column_name );
				rv.delete_pk_where = rv.delete_pk_where + where + "\""+ column_name + "\"  = " + i_pk;
				where = " and ";
			} 
		}
	}

	// selects
	if ( op === "select" ) {
		rv.select_projected_cols = "";
		rv.where_clause = "";
		rv.order_by_clause = "";
		rv.limit = "";
		rv.offset = "";

		com = " ";
		for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
			column_name = model.tables[tp].columns[i].column_name;
			rv.select_projected_cols = rv.select_projected_cols + com + "\"" + column_name + "\"";
			com = ",";
		}

		// Limit set of rows returned.
		if ( count != "" && offset != "" )
		{
			rv.limit = " limit "+count;
			rv.offset = " offset "+offset;
		}
		if ( count != "" && offset == "" )
		{
			rv.limit = " limit "+count;
			rv.offset = "";
		}

		// order the data set returned
		if ( sort != "" )
		{
			rv.order_by_clause = " order by ";
			// xyzzy - validate column names
			// xyzzy - put into order by clause
			rv.order_by_clause =  rv.order_by_clause + sort;
		}

		if ( debug4x ) {
			console.log ( ">>>>>>>>>>>>>>> query="+JSON.stringify(query) );
		}

		// use the pattern match query on the default column
		if ( query != "" && where != "" )
		{
			// xyzzy - get both query and where to work together
			rv.error = new restify.InvalidArgumentError("can not specify both a query and a where parameter at the same time.");
		}
		else if ( query != "" )
		{
// xyzzy
			if ( typeof model.tables[tp].default_query_column != "undefined" )  {
				rv.where_clause = ts0 ( " where \"%{query_column_name%}\" like '%{query%}'"
					, { "query_column_name": model.tables[tp].default_query_column, query: '%'+SQLEncodeNQ(query)+'%' } );
			} else {
				rv.error = new restify.InvalidArgumentError("default_query_column is not specified in the model for this table.");
			}
			// xyzzy - log this for statistical purposes and optimization  - think pattent
		}
		// do a full where clause - convert parse tree into code.
		else if ( where != "" )
		{
			// xyzzy - log this "where" for statistical purposes and optimization  - think pattent
			// xyzzy - shoud bind to data using $ var's instead of inline?
			where = JSON.parse ( where );
			s_where = "where ";
			w = "";
			gen_where_clause_error = 0;
			gen_where_clause_error_msg = "";
			
			if ( debug4x ) {
				console.log ( "where.length = " +where.length );
			}

			for ( i = 0; i < where.length; i++ ) {
				w = w + s_where + "(" + gen_where_clause ( tp, where[i] ) + " ) ";
				if ( debug4x ) {
					console.log ( "w = " +w );
				}
				s_where = " and ";
			}
			rv.where_clause = w;
			if ( debug4x ) {
				console.log ( "rv.where_clause = " +rv.where_clause );
			}
			if ( gen_where_clause_error ) {
				rv.error = new restify.InvalidArgumentError( gen_where_clause_error_msg );
			}
		}

	}
	if ( op === "select-pk" ) {
		rv.select_projected_cols = "";
		where = " where ";
		rv.select_where_by_pk = "";				// generate a 1 row return PK 
		com = " ";
		for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
			column_name = model.tables[tp].columns[i].column_name;
			rv.select_projected_cols = rv.select_projected_cols + com + "\""+ column_name + "\"";
			com = ",";
			if ( typeof model.tables[tp].columns[i].primary_key === "string" && model.tables[tp].columns[i].primary_key === "yes" ) {
				i_pk = '$' + dn.get_dollar_no( req_params, column_name );
				rv.select_where_by_pk = rv.select_where_by_pk + where + "\""+ column_name + "\" = " + i_pk;
				where = " and ";
			} 
		}
	}
	// predef
	if ( op === "predef" ) {														// Predefined queries (Read only views, limited to select, etc.)
		if ( typeof model.tables[tp].select !== "undefined" ) {						// If select is defined for this predef
			var cur_select = model.tables[tp].select;
			var ts_hash = { "log_comment": '%{log_comment%}' };						// to replace log_comment with itself.
			rv.select_stmt = model.tables[tp].select;								// just in case we don't pass through for
			if ( typeof model.tables[tp].columns !== "undefined" ) {				// if columns are defined for this
				for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {	// iterate over them
					column_name = model.tables[tp].columns[i].column_name;			// for each column_name
					var re = new RegExp("%{"+column_name+"%}");						// Let's see if it is in the select statment
					if ( re.test( cur_select ) ) {
						var s = dn.get_dollar_no ( req_params, column_name );		// Ok found it - pull from data
						ts_hash[ column_name ] = '$'+s;								// convert it to a dollar-no positional parameter
					}
				}
				rv.select_stmt = ts0 ( cur_select, ts_hash );						// Put in all the $1..$N's - replating ${log_comment%} with itself
			}
		}
	}

	debug_2(".1.gen_crud_lib.m4.js",__FUNCTION__,360,"\ncrud_info:"+JSON.stringify ( rv )+"\n\n");

	if ( $debug$.showQuery ) {
		console.log ( "Query info is:\nFile: "+ ".1.gen_crud_lib.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 363 + " " + JSON.stringify ( rv, null, 2 ) + "\n\n" );
	}

	return rv;
}


// ------------------------------------------------------------------------------------------------------------------------------------------
function find_col_in_data( req_params, column_name ) {
    'use strict';
	var __FUNCTION__ = "find_col_in_data";
	var i = 0, key, val;
	for ( key in req_params ) {
		val = req_params[key];
		if ( key === column_name ) {
			return i+1;
		}
		i++;
	}
	return -1;
}





/* Do not modify this file - it is generated by m4 */







// ------------------------------------------------------------------------------------------------------------------------------------------
// Views 
// ------------------------------------------------------------------------------------------------------------------------------------------
function send_result (res, next, err, data_list) {
    'use strict';
	var __FUNCTION__ = "send_result";
	try {							// xyzzy this is due to setting headers on error after data is already sent - need to find cause
		if (err) {
			return next(err);
		}
		
		if(data_list) {
			res.send(data_list);
			return next();
		} else {
			return next(new restify.ResourceNotFoundError("Could not find any such row"));
		}
	} catch(ignore) {
	}
}




// server.post('/v001/ajax/api/get_sg_cfg/:table_name'		, get_sg_cfg);		
function get_sg_cfg(req, res, next) {
    'use strict';
	var __FUNCTION__ = "get_sg_cfg";
	var rows = [], mx;
	debug_2(".1.views.m4.js",__FUNCTION__,38,"req:"+JSON.stringify ( req.params ));
	var table_name = req.params.table_name;
	var tp = find_table ( table_name, model );
	debug_2(".1.views.m4.js",__FUNCTION__,41,"\n\n******************************* tp = "+tp+"\n\n");

// xyzzy - if defined in the model for columns and spec - shold we even bother with quering the database?
	dn.runQuery ( ts0( 'select column_name, data_type, character_maximum_length from information_schema.columns where table_name = \'%{table_name%}\' ', { "table_name":table_name } ), function ( err, result ) {
		if ( err ) {
			send_result ( res, next, null, { "status":"error", "msg":"invalid table_name in query", "raw": JSON.stringify(err) } );
			return null;
		} else {
			// rows.push ( result.rows[0] );
		
			/*	
				var columns = [
					{id: "title", name: "Title", field: "title"},
					{id: "duration", name: "Duration", field: "duration"},
					{id: "%", name: "% Complete", field: "percentComplete"},
					{id: "start", name: "Start", field: "start"},
					{id: "finish", name: "Finish", field: "finish"},
					{id: "effort-driven", name: "Effort Driven", field: "effortDriven"}
				];

				var options = {
					enableCellNavigation: true,
					enableColumnReorder: false
				};

				editor: Slick.Editors.Checkbox
				editor: Slick.Editors.Date
				editor: Slick.Editors.PercentComplete
				editor: Slick.Editors.Text
				editor: Slick.Editors.Text

				formatter: Slick.Formatters.Checkmark
				formatter: Slick.Formatters.PercentCompleteBar
				formatter: TaskNameFormatter

			*/

			var rv = {};
			rv.options = {
					enableCellNavigation: true,					// xyzzy - really should be extracted from "model"
					enableColumnReorder: false
				};
			rv.columns = [];
			if ( result.rows.length ) {
				for ( var i = 0; i < result.rows.length; i++ ) {
					rv.columns[i] = {
							id: 	result.rows[i].column_name
						, 	name: 	result.rows[i].column_name		// xyzzy - really need to use better "name" field.
						, 	field: 	result.rows[i].column_name
						};
				}
			} else {
				var www = {
					  "template":	"columnTemplate"
					, "width":		".data."
					, "resizable":	".data."
					, "validator":	".data."
					, "editor":		".func."					// ref's a function
					, "cssClass":	".data."
					, "cannotTriggerInsert":".data."
					, "maxWidth":	".data."
					, "formatter":	".func."					// ref's a function
					, "name":		".data."					// From above - name field overridden.
// xyzzy - missing?
				};
				// pull the rv.columns from the model instead.
				var tp = find_table ( table_name, model );
				// console.log ( "tp = "+tp+" "+JSON.stringify ( model.tables[tp] ) );
				for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
					var column_name = model.tables[tp].columns[i].column_name;
					rv.columns[i] = {
							id: column_name
						, 	name: column_name
						, 	field: column_name
						};
					for ( var key in www ) {
						if ( typeof model.tables[tp].columns[i][key] != "undefined" ) {
							if ( www[key] === ".data." ) {
								rv.columns[i][key] = model.tables[tp].columns[i][key];
							} else if ( www[key] === ".func." ) {
								rv.columns[i][key] = model.tables[tp].columns[i][key];				// xyzzy - is this correct?
								rv.columns[i]["eval_of_"+key] = true;
							} else {
								rv.columns[i][www[key]] = model.tables[tp].columns[i][key];
							}
						}
					}
					// xyzzy - what about other opts that need to go out to the client?
				}
			}

			send_result ( res, next, null, rv );
		}
	});

}

// ------------------------------------------------------------------------------------------------------------------------------------------
function meta_data(req, res, next) {
    'use strict';
	var __FUNCTION__ = "meat_data";
	debug_2(".1.views.m4.js",__FUNCTION__,142,"in:"+__FUNCTION__);

	send_result ( res, next, null, model );
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function get_ids(req, res, next) {
    'use strict';
	var __FUNCTION__ = "get_ids";
	var rows = [];
	var saved_stmt;
	debug_2(".1.views.m4.js",__FUNCTION__,153,"req:"+JSON.stringify ( req.params ));
	var seq_name = req.params.seq_name;
	var tp = find_seq ( seq_name, model );
	dn.init();
	debug_2(".1.views.m4.js",__FUNCTION__,157,"\n\n******************************* tp = "+tp+"\n\n");
	if ( tp === -1 ) {
		return next( new restify.InvalidArgumentError("Error (1803): The specified sequence("+seq_name+") is not available.") );
	}
  
	var stmt = ts0( 'select nextval(\'%{seq_name%}\') as %{seq_name%} ', { "seq_name":seq_name } );
	var query = dn.runQuery ( stmt );
	query.on('error',function(err) {
		debug_2(".1.views.m4.js",__FUNCTION__,165,"\n\n******************************* on error = "+tp+"\n\n" );
		send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt } );
	});
	query.on('row', function(row) { 
		debug_2(".1.views.m4.js",__FUNCTION__,169,"\n\n******************************* on row = "+tp+"\n\n" );
		rows.push(row);
	});
	query.on('end', function(result) {
		debug_2(".1.views.m4.js",__FUNCTION__,173,"\n\n******************************* on end = "+tp+"\n\n" );
		send_result ( res, next, null, rows );
	});
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function get_multiple_ids(req, res, next) {
    'use strict';
	var __FUNCTION__ = "get_multiple_ids";
	var rows = [];
	var multi = JSON.parse(req.params.multi);
	dn.init();
	
	var fx = function ( pos, req, res, next ) {
		var seq_name = multi[pos];

		var tp = find_seq ( seq_name, model );
		if ( tp === -1 ) {
			return next( new restify.InvalidArgumentError("Error (1804): The specified sequence("+seq_name+") is not available.") );
		}
	  
		dn.runQuery ( ts0( 'select nextval(\'%{seq_name%}\') as %{seq_name%} ', { "seq_name":seq_name } ), function ( err, result ) {
			if ( err ) {
				send_result ( res, next, null, { "status":"error", "msg":"invalid sequence query", "raw": JSON.stringify(err) } );
				return null;
			} else {
				rows.push ( result.rows[0] );
				if ( pos+1 < multi.length ) {
					return fx ( pos+1, req, res, next );
				} else {
					send_result ( res, next, null, rows );
					return null;
				}
			}
		});
	};

	var v = fx ( 0, req, res, next );
	if ( v ) {
		return v;
	}

}

// ------------------------------------------------------------------------------------------------------------------------------------------
//
// Add to Request on Select
// 	query=				--- Need to understand this more --- Currently just a "word" that we are searching for
// 						--- Let's just search using keyword matching on a specified field/fields
// 	where=				comprehensive limitations on data set returned --- JSON parse tree of criteria
// 	offset=
// 	count=
// 	appkey= ... Ignored for now
// 	sort=	[Col]-[asc|desc],...
//
// All of this moved to gen_crud*.m4.js
//
// ------------------------------------------------------------------------------------------------------------------------------------------
function select_all_data(req, res, next) {
    'use strict';
	var __FUNCTION__ = "select_all_data";
	var rows = [];
	var rows2 = [];
	var query;
	var crud_info = {};
	debug_2(".1.views.m4.js",__FUNCTION__,238,"req:"+JSON.stringify ( req.params ));
	var table_name = req.params.table_name;
	var valid_table = check_table_name ( table_name );
	var fmt = 	( req.params.fmt ) ? req.params.fmt : "raw";		
	var stmt_saved = "";
	var stmt_saved_no_limit = "";

	if ( valid_table.error ) {
		return next(valid_table.error);
	}
	var v = validate_data( 'select', table_name, req.params );
	if ( ! v.ok ) {
    	return next(new restify.MissingParameterError("Missing or invalid data;"+v.msg));		
	}
  
	// Xyzzy - query/where 
	var tp = find_table ( table_name, model );
	if ( model.tables[tp].predef && typeof model.tables[tp].select === "undefined" ) {
    	return next(new restify.MissingParameterError("select is not valid on this predefined table query;"));		
	} else if ( model.tables[tp].predef ) {
// xyzzy - need to handle paging (limit)/(offset) at this point
// xyzzy - what about count?
// xyzzy - what about orderby
		crud_info = gen_crud_info ( crud_info, 'predef', table_name, req.params, __FUNCTION__, __FILE__, 261 );
		query = dn.runQuery ( stmt_saved = ts0( crud_info.select_stmt, crud_info ) );
	} else {
		crud_info = gen_crud_info ( crud_info, 'select', table_name, req.params, __FUNCTION__, __FILE__, 264 );
		if ( crud_info.error ) {
			return next(crud_info.error);
		}
		stmt_saved_no_limit = ts0( 'select %{log_comment%} %{select_projected_cols%} from %{table_name%} %{where_clause%} ', crud_info );
		query = dn.runQuery ( stmt_saved = ts0( 'select %{log_comment%} %{select_projected_cols%} from %{table_name%} %{where_clause%} %{order_by_clause%} %{limit%} %{offset%} ', crud_info ) );
	}
	if ( $debug$.showQuery ) {
		console.log ( "Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 272 + " " + stmt_saved + "\n\n" );
	}
	query.on('error',function(err) {
		debug_2(".1.views.m4.js",__FUNCTION__,275,"got on error <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<" );
		send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt_saved } );
	});
	query.on('row', function(row) { //fired once for each row returned
		// Xyzzy - Send back after N rows
		// Xyzzy - Cache rest of data for X amount of time?
		rows.push(row);
	});
	query.on('end', function(result) {
		// fired once and only once, after the last row has been returned and after all 'row' events are emitted
		// in this example, the 'rows' array now contains an ordered set of all the rows which we received from postgres
		// debug_2(".1.views.m4.js",__FUNCTION__,286,result.rowCount + ' rows were received');
console.log ( "query.on.end: 275, fmt="+fmt+" rows="+JSON.stringify ( rows ) );
		if ( fmt === "raw" ) {
console.log ( "query.on.end: Sending result - all done." );
			send_result ( res, next, null, rows );
		} else {		// if ( fmt === "paged" )
		
console.log ( "query.on.end: 280, fmt="+fmt );
			var count_query = ( model.tables[tp].count_query ) ?  model.tables[tp].count_query : " select count(1) as cnt from ( %{query%} ) as t0 ";
			count_query = ts0 ( count_query, { "query":stmt_saved_no_limit } );
			if ( $debug$.showQuery ) {
				console.log ( "Count Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 297 + " " + count_query + "\n\n" );
			}

console.log ( "query.on.end: 287, count_query="+count_query );
			var query2 = dn.runQuery ( count_query );
			query2.on('error',function(err) {
				debug_2(".1.views.m4.js",__FUNCTION__,303,"got on error on count <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<" );
				send_result ( res, next, null, { "status":"error", "msg":"invalid query2", "raw": JSON.stringify(err), "query":count_query } );
			});
			query2.on('row', function(row) { //fired once for each row returned
				// Xyzzy - Send back after N rows
				// Xyzzy - Cache rest of data for X amount of time?
				rows2.push(row);
			});
			query2.on('end', function(result) {
				//fired once and only once, after the last row has been returned and after all 'row' events are emitted
				//in this example, the 'rows' array now contains an ordered set of all the rows which we received from postgres
				// debug_2(".1.views.m4.js",__FUNCTION__,314,result.rowCount + ' rows were received');
				send_result ( res, next, null, { "total":rows2[0].cnt, "count":rows.length, "data":rows } );
			});
console.log ( "query.on.end: 304" );
			
		}
	});
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function select_pk_row(req, res, next) {
    'use strict';
	var __FUNCTION__ = "select_pk_row";
	var rows = [];
	var table_name = req.params.table_name;
	var table_name = req.params.table_name;
	var stmt_saved;
	var valid_table = check_table_name ( table_name );
	if ( valid_table.error ) {
		return next(valid_table.error);
	}
	var v = validate_data( 'select-pk', table_name, req.params );
	if ( ! v.ok ) {
    	return next(new restify.MissingParameterError("Missing or invalid data;"+v.msg));		
	}
    
	var crud_info = gen_crud_info ( {}, 'select-pk', table_name, req.params, __FUNCTION__, __FILE__, 340 );
	if ( crud_info.error ) {
		return next(crud_info.error);
	}
	var query = dn.runQuery ( stmt_saved = ts0( 'select %{log_comment%} %{select_projected_cols%} from %{table_name%} %{select_where_by_pk%} ', crud_info ) );
	if ( $debug$.showQuery ) {
		console.log ( "Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 346 + " " + stmt_saved + "\n\n" );
	}
	query.on('error',function(err) {
		send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt_saved } );
	});
	query.on('row', function(row) { //fired once for each row returned
		rows.push(row);
	});
	query.on('end', function(result) {
		//fired once and only once, after the last row has been returned and after all 'row' events are emitted
		//in this example, the 'rows' array now contains an ordered set of all the rows which we received from postgres
		// debug_2(".1.views.m4.js",__FUNCTION__,357,result.rowCount + ' rows were received');
		send_result ( res, next, null, rows );
	});
}


// ------------------------------------------------------------------------------------------------------------------------------------------
function insert_1_row(req, res, next) {
    'use strict';
	var __FUNCTION__ = "insert_1_row";
	var table_name = req.params.table_name;
	var table_name = req.params.table_name;
	var stmt_saved = "";
	var valid_table = check_table_name ( table_name );
	if ( valid_table.error ) {
		return next(valid_table.error);
	}
	var v = validate_data( 'insert', table_name, req.params );
	if ( ! v.ok ) {
    	return next(new restify.MissingParameterError("Missing or invalid data;"+v.msg));		
	}

	var crud_info = gen_crud_info ( {}, 'insert', table_name, req.params, __FUNCTION__, __FILE__, 379 );
	if ( crud_info.error ) {
		return next(crud_info.error);
	}
	//xyzzy-convert to using function call back.
	var query = dn.runQuery ( stmt_saved = ts0( 'insert %{log_comment%} into %{table_name%} ( %{insert_col_names%} ) values ( %{insert_col_no_s%} )', crud_info ) );
	if ( $debug$.showQuery ) {
		console.log ( "Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 386 + " " + stmt_saved + "\n\n" );
	}
	query.on('error',function(err) {
		send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt_saved } );
	});
	query.on('end',function() {
		try {
			res.send({"status":"ok"}); // xyzzy4
			return next();
		} catch ( err ) {
		}
	});
    
}

// ------------------------------------------------------------------------------------------------------------------------------------------
//	UPDATE table SET field='C', field2='Z' WHERE id=3;
//	INSERT INTO table (id, field, field2)
//       SELECT 3, 'C', 'Z'
//       WHERE NOT EXISTS (SELECT 1 FROM table WHERE id=3);
function update_1_row(req, res, next) {
    'use strict';
	var __FUNCTION__ = "update_1_row";
	var table_name = req.params.table_name;
	var stmt_saved;
	var valid_table = check_table_name ( table_name );
	if ( valid_table.error ) {
		return next(valid_table.error);
	}
	var v = validate_data( 'update', table_name, req.params );
	if ( ! v.ok ) {
    	return next(new restify.MissingParameterError("Missing or invalid data;"+v.msg));		
	}

	var crud_info = gen_crud_info ( {}, 'update', table_name, req.params, __FUNCTION__, __FILE__, 420 );
	if ( crud_info.error ) {
		return next(crud_info.error);
	}
	dn.runQuery ( stmt_saved = ts0( 'update %{log_comment%} %{table_name%} set %{update_set%} %{update_pk_where%}', crud_info ), function ( err, query ) {
		if ( $debug$.showQuery ) {
			console.log ( "Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 426 + " " + stmt_saved + "\n\n" );
		}
		//if ( query && typeof query.count !== "undefined" && query.count === 0 ) {
		//	debug_2(".1.views.m4.js",__FUNCTION__,429,"No Rows Updated; trying insert -- debuging check");
		//}
		if ( err ) {
			debug_2(".1.views.m4.js",__FUNCTION__,432,"typeof(err)=="+typeof(err));
			send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt_saved } );
		} else {
			//if ( query.count === 0 ) {
				// Xyzzy - use regular insert since we are checking query.count???
				debug_2(".1.views.m4.js",__FUNCTION__,437,"No Rows Updated; trying insert");
				dn.runQuery ( stmt_saved = ts0( 'insert into %{table_name%} ( %{insert_col_names%} ) select %{insert_col_no_s%} '+
					'where not exists ( select 1 from %{table_name%} %{update_pk_where%} ) ', crud_info ), function ( err2, query2 ) {
					if ( err2 ) {
						send_result ( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err2), "query":stmt_saved } );
					} else {
						try {
							debug_2(".1.views.m4.js",__FUNCTION__,444,"insert occured.");
							res.send({"status":"ok"}); 
							return next();
						} catch ( err ) {
						}
					}
				});
			//} else {
			//	try {
			//		debug_2(".1.views.m4.js",__FUNCTION__,453,"insert occured.");
			//		res.send({"status":"ok"}); 
			//		return next();
			//	} catch ( err ) {
			//	}
			//}
		}
	});
}

// ------------------------------------------------------------------------------------------------------------------------------------------
function delete_1_row(req, res, next) {
    'use strict';
	var __FUNCTION__ = "delete_1_row";
	var table_name = req.params.table_name;
	var stmt_saved;
	var valid_table = check_table_name ( table_name );
	if ( valid_table.error ) {
		return next(valid_table.error);
	}
	var v = validate_data( 'delete', table_name, req.params );
	if ( ! v.ok ) {
    	return next(new restify.MissingParameterError("Missing or invalid data;" + v.msg));		
	}

	var crud_info = gen_crud_info( {}, 'delete', table_name, req.params, __FUNCTION__, __FILE__, 478 );
	if ( crud_info.error ) {
		return next(crud_info.error);
	}
//xyzzy-convert to using function call back.
	var query = dn.runQuery( stmt_saved = ts0( 'delete %{log_comment%} from %{table_name%} %{delete_pk_where%} ', crud_info ) );
	if ( $debug$.showQuery ) {
		console.log ( "Query is:\nFile: "+ ".1.views.m4.js" +" Function:"+  __FUNCTION__ + " Line: "+ 485 + " " + stmt_saved + "\n\n" );
	}
	query.on('error',function(err) {
		send_result( res, next, null, { "status":"error", "msg":"invalid query", "raw": JSON.stringify(err), "query":stmt_saved } );
	});
	query.on('end',function() {
		try {
			res.send({"status":"ok"}); 
			return next();
		} catch ( err ) {
		}
	});
}



/* Do not modify this file - it is generated by m4 */









//	3. Add back-end call to mark as one we are going to work on 	/api/mark-as-in-progress/ID				30min
//	4. Save file to file system 									/api/save-to-fs/ID						1hr
// server.post('/v001/ajax/api/mark_as_in_prog/:so_id
function mark_as_in_progress(req, res, next) {
    'use strict';
	var __FUNCTION__ = "mark_as_in_prog";
	var rows = [], mx, rv;
	var so_id = req.params.so_id;
	debug_2(".1.soedit-views.m4.js",__FUNCTION__,20,"req:"+JSON.stringify ( req.params ));
	var stmt;

	/*

create table "soso_data_add" (
	  "Id"					bigint not null
	, "unusable"			char varying (1) default 'n' not null
	, "tbd"					char varying (1) default 'n' not null
	, "humor"				char varying (1) default 'n' not null
	, "autotest_ok"			char varying (1) default 'n' not null
	, "when_file_upd"		timestamp
);
  	*/

// xyzzy - if defined in the model for columns and spec - shold we even bother with quering the database?
// 	
//	var goober = { "so_id":so_id };
//	stmt = ts0( 'update /*v06*/ soso_data_add set tbd = \'y\' where "Id" = %{so_id%} ', goober );

	dn.runQuery ( stmt = ts0( 'update /*v07*/ soso_data_add set tbd = \'y\' where "Id" = %{so_id%} ', { "so_id":so_id } ), function ( err, result ) {
		if ( err ) {
			send_result ( res, next, null, { "status":"error", "msg":"Unable to update SO item to TBD", "raw": JSON.stringify(err), "stmt":stmt } );
			return null;
		} else {
			rv = { "status":"success" };
			send_result ( res, next, null, rv );
		}
	});

}

//	4. Save file to file system 									/api/save-to-fs/ID						1hr
function save_to_fs(req, res, next) {
    'use strict';
	var __FUNCTION__ = "save_to_fs";
	var rows = [], mx;
	var so_id = req.so_id;
	debug_2(".1.soedit-views.m4.js",__FUNCTION__,58,"req:"+JSON.stringify ( req.params ));
	var table_name = req.params.table_name;
	var tp = find_table ( table_name, model );
	debug_2(".1.soedit-views.m4.js",__FUNCTION__,61,"\n\n******************************* tp = "+tp+"\n\n");

// xyzzy - if defined in the model for columns and spec - shold we even bother with quering the database?
	dn.runQuery ( ts0( 'select column_name, data_type, character_maximum_length from information_schema.columns where table_name = \'%{table_name%}\' ', { "table_name":table_name } ), function ( err, result ) {
		if ( err ) {
			send_result ( res, next, null, { "status":"error", "msg":"invalid table_name in query", "raw": JSON.stringify(err) } );
			return null;
		} else {

			var rv = {};
			rv.options = {
					enableCellNavigation: true,
					enableColumnReorder: false
				};
			rv.columns = [];
			if ( result.rows.length ) {
				for ( var i = 0; i < result.rows.length; i++ ) {
					rv.columns[i] = {
							id: 	result.rows[i].column_name
						, 	name: 	result.rows[i].column_name		// xyzzy - really need to use better "name" field.
						, 	field: 	result.rows[i].column_name
						};
				}
			} else {
				var www = {
					  "template":	"columnTemplate"
					, "width":		".data."
					, "resizable":	".data."
					, "validator":	".data."
					, "editor":		".func."					// ref's a function
					, "cssClass":	".data."
					, "cannotTriggerInsert":".data."
					, "maxWidth":	".data."
					, "formatter":	".func."					// ref's a function
					, "name":		".data."					// From above - name field overridden.
// xyzzy - missing?
				};
				// pull the rv.columns from the model instead.
				var tp = find_table ( table_name, model );
				// console.log ( "tp = "+tp+" "+JSON.stringify ( model.tables[tp] ) );
				for ( i = 0, mx = model.tables[tp].columns.length; i < mx; i++ ) {
					var column_name = model.tables[tp].columns[i].column_name;
					rv.columns[i] = {
							id: column_name
						, 	name: column_name
						, 	field: column_name
						};
					for ( var key in www ) {
						if ( typeof model.tables[tp].columns[i][key] != "undefined" ) {
							if ( www[key] === ".data." ) {
								rv.columns[i][key] = model.tables[tp].columns[i][key];
							} else if ( www[key] === ".func." ) {
								rv.columns[i][key] = model.tables[tp].columns[i][key];				// xyzzy - is this correct?
								rv.columns[i]["eval_of_"+key] = true;
							} else {
								rv.columns[i][www[key]] = model.tables[tp].columns[i][key];
							}
						}
					}
					// xyzzy - what about other opts that need to go out to the client?
				}
			}

			send_result ( res, next, null, rv );
		}
	});

}







// ------------------------------------------------------------------------------------------------------------------------------------------
// Server 
// ------------------------------------------------------------------------------------------------------------------------------------------

var server = restify.createServer();

//  .use(restify.authorizationParser())
server.use(restify.acceptParser(server.acceptable))
  .use(restify.dateParser())
  .use(restify.queryParser())
  .use(restify.bodyParser())
  .use(completeParams())
  .use(restify.throttle({
    burst: 10,
    rate: 1,
    ip: false,
    xff: true,
  }));

// Logging
server.on('after', restify.auditLogger({
    log: new Logger({
        name: 'postgres-rest',
        streams: [{ level: "info", stream: process.stdout }, 
                  { level: "info", path: 'log/server.log' }],
    })
}));


// ------------------------------------------------------------------------------------------------------------------------------------------
// Routes 
//
// From Backbone Documentation: http://documentcloud.github.com/backbone/#Sync
// 	create → POST   /collection
// 	read → GET   /collection[/id]
// 	update → PUT   /collection/id
// 	delete → DELETE   /collection/id
// 
// Restify - Documentation - http://mcavage.github.com/node-restify/#Request-API
//
// ------------------------------------------------------------------------------------------------------------------------------------------

// XYZZY-require-convert-to-a-table-system returned by a requrie

// Serve in short form - for local testin on the local Node.js port
server.get('/api/meta/'								, meta_data);			
//server.get('/api/pg_status/'						, get_postgres_status);		// Status of postgres
//server.get('/api/rest_status/'					, get_pgrest_status);		// Status of this program.
//server.get('/api/logs/:_username'					, get_postgres_logs);		// Logs from postgres for a user
server.get('/api/table/:table_name/'				, select_all_data);			// Get All
server.get('/api/table/:table_name/:id'				, select_pk_row);			// Get 1 row
server.put('/api/table/:table_name/:id'				, update_1_row);			// update/insert
server.post('/api/table/:table_name/'				, insert_1_row);
server.del('/api/table/:table_name/:id'				, delete_1_row);		
server.get('/api/get_ids/:seq_name/'				, get_ids);		
server.post('/api/get_ids/:seq_name/'				, get_ids);		
server.post('/api/get_multiple_ids/'				, get_multiple_ids);		
server.get('/api/get_sg_cfg/:table_name'			, get_sg_cfg);		

// Application Calls
server.get('/api/mark_as_in_progress/:so_id'	, mark_as_in_progress);		
server.get('/api/save_to_fs/:so_id'			, save_to_fs);		


// Serve in long form - so can be accessed via Nginx
server.get('/v001/ajax/api/meta/'							, meta_data);			
//server.get('/v001/ajax/api/pg_status/'					, get_postgres_status);		// Status of postgres
//server.get('/v001/ajax/api/rest_status/'					, get_pgrest_status);		// Status of this program.
//server.get('/v001/ajax/api/logs/:_username'				, get_postgres_logs);		// Logs from postgres for a user
server.get('/v001/ajax/api/table/:table_name/'				, select_all_data);			// Get All
server.get('/v001/ajax/api/table/:table_name/:id'			, select_pk_row);			// Get 1 row
server.put('/v001/ajax/api/table/:table_name/:id'			, update_1_row);			// update/insert
server.post('/v001/ajax/api/table/:table_name/'				, insert_1_row);
server.del('/v001/ajax/api/table/:table_name/:id'			, delete_1_row);		
server.get('/v001/ajax/api/get_ids/:seq_name/'				, get_ids);		
server.post('/v001/ajax/api/get_ids/:seq_name/'				, get_ids);		
server.post('/v001/ajax/api/get_multiple_ids/'				, get_multiple_ids);		
server.get('/v001/ajax/api/get_sg_cfg/:table_name'			, get_sg_cfg);		

// Application Calls
server.get('/v001/ajax/api/mark_as_in_progress/:so_id'	, mark_as_in_progress);		
server.get('/v001/ajax/api/save_to_fs/:so_id'			, save_to_fs);		


//xvar routeTable = [
//x	 { method: 'get',  path:[ '/api/meta', 						'/v001/ajax/api/meta' 					], 	func:meta_data 				}
//x	,{ method: 'get',  path:[ '/api/table/:table_name', 	 	'/v001/ajax/api/table/:table_name' 		], 	func:select_all_data 		}
//x	,{ method: 'get',  path:[ '/api/table/:table_name/:id',  	'/v001/ajax/api/table/:table_name/:id' 	], 	func:select_pk_data 		}
//x	,{ method: 'put',  path:[ '/api/table/:table_name/:id',  	'/v001/ajax/api/table/:table_name/:id' 	], 	func:update_1_row	 		}
//x	,{ method: 'post', path:[ '/api/table/:table_name/', 		'/v001/ajax/api/table/:table_name/' 	], 	func:insert_1_row	 		}
//x	,{ method: 'del',  path:[ '/api/table/:table_name/:id',  	'/v001/ajax/api/table/:table_name/:id' 	], 	func:delete_1_row	 		}
//x	,{ method: 'post', path:[ '/api/get_ids/:seq_name', 	 	'/v001/ajax/api/get_ids/:seq_name' 		], 	func:get_ids		 		}
//x	,{ method: 'post', path:[ '/api/get_multiple_ids', 	 		'/v001/ajax/api/get_multiple_ids' 		], 	func:get_multiple_ids		}
//x];
//x
//xfunction makeRoutes ( server, routeTable ) {
//x	for ( var i = 0; i < routeTable.length; i++ ) {
//x		for ( var j = 0; j < routeTable[i].path.length; j++ ) {
//x			switch ( routeTable[i].method ) {
//x			case 'get':		server.get  ( routeTable[i].path[j],	routeTable[i].func ); 	break;
//x			case 'put':		server.put  ( routeTable[i].path[j],	routeTable[i].func ); 	break;
//x			case 'post':	server.post ( routeTable[i].path[j],	routeTable[i].func ); 	break;
//x			case 'del':		server.del  ( routeTable[i].path[j],	routeTable[i].func ); 	break;
//x			case 'head':	server.head ( routeTable[i].path[j],	routeTable[i].func ); 	break;
//x			}
//x		}
//x	}
//x}




// ------------------------------------------------------------------------------------------------------------------------------------------
// Serve Static Content 
// ------------------------------------------------------------------------------------------------------------------------------------------

function serve(req, res, next) {
    'use strict';
	var __FUNCTION__ = "serve";
	debug_2(/*__FILE__*/".app.m4.js",__FUNCTION__,/*__LINE__*/1689,req.path);
	var log = req.log, f
		, fname = (req.path === '/') ?  path.normalize('./static/index.html') : path.normalize('./static' + req.path)
		;
	debug_2(/*__FILE__*/".app.m4.js",__FUNCTION__,/*__LINE__*/1693,'GET req.path:'+req.path+" raw-file-name:"+fname);		// xyzzy2 - log in JSON
	log.debug('GET %s maps to %s', req.path, fname);

	if (!/^static\/?.*/.test(fname)) {			// Prevent people from use ../.. to escape the ./static directory
		return next(new NotAuthorizedError());
	}

	res.contentType = mime.lookup(fname);		// Determine the MIME type
	f = filed(fname);
	f.pipe(res);								// Send the file back to the user
	f.on('end', function () {
		return next(false);
	});
	return false;
}

// Limit what static files can be served to match these patterns.  Note that anything under directorys ./static/img ./static/js ./static/css will be served.
server.get('/', serve);
server.get(/(\/img\/|\/js\/|\/css\/|\/images\/)\S+/, serve);
server.get(/(.*\.html)/, serve);
server.get(/(favicon.ico)/, serve);





// ------------------------------------------------------------------------------------------------------------------------------------------
// Run It
// ------------------------------------------------------------------------------------------------------------------------------------------

server.listen(listen_port, function() {
    console.log('%s listening at %s', server.name, server.url);
});

